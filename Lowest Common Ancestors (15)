class TreeNode: 
def __init__(self, val=0, left=None, right=None): 
self.val = val 
self.left = left 
self.right = right 
def lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode: 

    # Base case: if root is None, return None 
    if not root: 
        return None 
     
    # If root is one of p or q, return root 
    if root == p or root == q: 
        return root 
     
    # Recursively find LCA in left and right subtrees 
    left_lca = lowestCommonAncestor(root.left, p, q) 
    right_lca = lowestCommonAncestor(root.right, p, q) 
     
    # If both left and right return non-None, root is the LCA 
    if left_lca and right_lca: 
        return root 
     
    # Otherwise, return the non-None value (either left_lca or right_lca) 
    return left_lca if left_lca else right_lca 
 
# Example usage: 
#        3 
#       / \ 
#      5   1 
#     / \ / \ 
#    6  2 0  8 
#      / \ 
#     7   4 
 
root = TreeNode(3) 
root.left = TreeNode(5) 
root.right = TreeNode(1) 
root.left.left = TreeNode(6) 
root.left.right = TreeNode(2) 
root.right.left = TreeNode(0) 
root.right.right = TreeNode(8) 
root.left.right.left = TreeNode(7) 
root.left.right.right = TreeNode(4)

# Nodes to find LCA for 

p = root.left  # Node with value 5 
q = root.left.right.right

# Find LCA 

lca = lowestCommonAncestor(root, p, q) 
print(f"LCA of {p.val} and {q.val} is {lca.val}") 
